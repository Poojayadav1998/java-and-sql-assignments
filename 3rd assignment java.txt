



Question 1)

1)By extending the Thread class, we cannot extend any other class, as Java does not allow multiple inheritances 
while implementing the Runnable interface; we can also extend other base class(if required).
2)By extending the Thread class, each of thread creates the unique object and associates with it 
while implementing the Runnable interface; multiple threads share the same object
3)Thread class provides various inbuilt methods such as getPriority(), isAlive and many more 
while the Runnable interface provides a single method, i.e., run().



Question 2:

package exception;

import java.util.LinkedList;

public class ThreadExample {
    public static void main(String[] args)
        throws InterruptedException
    {
       
        final PC pc = new PC();
  
        
        Thread t1 = new Thread(new Runnable() {
            @Override
            public void run()
            {
                try {
                    pc.produce();
                }
                catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
  
        
        Thread t2 = new Thread(new Runnable() {
            @Override
            public void run()
            {
                try {
                    pc.consume();
                }
                catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
  
       
        t1.start();
        t2.start();
  
        t1.join();
        t2.join();
    }
    public static class PC {
  
        
        LinkedList<Integer> list = new LinkedList<>();
        int capacity = 2;
  
        
        public void produce() throws InterruptedException
        {
            int value = 0;
            while (true) {
                synchronized (this)
                {
                    
                    while (list.size() == capacity)
                        wait();
  
                    System.out.println("Producer produced-"
                                       + value);
                    list.add(value++);
  
                    
                    notify();
  
                    
                    Thread.sleep(1000);
                }
            }
        }
  
       
        public void consume() throws InterruptedException
        {
            while (true) {
                synchronized (this)
                {
                   
                    while (list.size() == 0)
                        wait();
  
                    
                    int val = list.removeFirst();
  
                    System.out.println("Consumer consumed-"
                                       + val);
  
                    
                    notify();
  
                    Thread.sleep(1000);
                }
            }
        }
    }
}
